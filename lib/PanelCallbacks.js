const AuthService = require("../services/AuthService");
const TaskService = require("../services/TaskService");
const TelegramUserService = require("../services/TelegramUserService");

class PanelCallbacks {
  async generateAuthData(bot, userObject) {
    const telegramUser = await TelegramUserService.telegramId(userObject.id);

    if (!telegramUser) {
      await bot.sendMessage(userObject.id, "–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó", {
        parse_mode: "HTML",
      });
      return;
    }

    const authData = await AuthService.createKey({
      telegramUserId: telegramUser._id,
    });

    const message = `–í–∞—à—ñ –¥–∞–Ω—ñ –¥–ª—è –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–≥–æ –≤—Ö–æ–¥—É:\n<b>–õ–æ–≥—ñ–Ω:</b> ${userObject.username}\n<b>–ü–∞—Ä–æ–ª—å:</b> ${authData.key}`;
    await bot.sendMessage(userObject.id, message, {
      parse_mode: "HTML",
    });
  }

  async assignTask(bot, userObject, options) {
    const query = {
      botId: options?.botId,
      students: [options?.userId],
      taskId: options?.taskId,
      deadline: "",
      type: "single",
    };

    const assignedTasks = await TaskService.TaskRelationGetMany({
      botId: options?.botId,
      students: options?.userId,
      taskId: options?.taskId,
      type: "single",
    });

    let isActiveTask = false;

    if (assignedTasks.length) {
      assignedTasks.forEach((task) => {
        console.log(task);
        console.log(task.meta[0].status);

        if (task.meta[0].status !== "finished") {
          isActiveTask = true;
        }
      });
    }

    if (!isActiveTask) {
      const newTaskRelation = await TaskService.TaskRelationCreate(query);

      if (!newTaskRelation?._id) {
        await bot.sendMessage(userObject.id, "‚ÄºÔ∏è –í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞", {
          parse_mode: "HTML",
        });
        return;
      }

      await bot.sendMessage(
        userObject.id,
        "‚úÖ –í–∞–º –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ –Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è! üìö –ü–µ—Ä–µ—Ö–æ–¥—å—Ç–µ –≤ –ø–∞–Ω–µ–ª—å —Ç–∞ –ø—Ä–∏—Å—Ç—É–ø–∞–π—Ç–µ –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è!",
        {
          parse_mode: "HTML",
        }
      );
    } else {
      await bot.sendMessage(
        userObject.id,
        "‚ö†Ô∏è –î–∞–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∂–µ –±—É–ª–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–µ —Ä–∞–Ω—ñ—à–µ. üìö –ü–µ—Ä–µ—Ö–æ–¥—å—Ç–µ –≤ –ø–∞–Ω–µ–ª—å —Ç–∞ –ø—Ä–∏—Å—Ç—É–ø–∞–π—Ç–µ –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è!",
        {
          parse_mode: "HTML",
        }
      );
      return;
    }
  }
}

module.exports = new PanelCallbacks();
